SELECT * FROM Book WHERE price >= 10000 AND price <= 20000 ORDER BY bookname DESC;


SELECT * FROM Book WHERE price BETWEEN 10000 AND 20000 ORDER BY bookname DESC;

SELECT * FROM Book WHERE publisher IN ('굿스포츠', '대한미디어');

SELECT * FROM Book WHERE publisher = '굿스포츠' OR publisher='대한미디어'


LIKE  - 패턴 
LIKE '단어' -> 단어에 매칭되는 조건
LIKE '단어%' -> 단어로 시작되는 조건 
LIKE '%단어' -> 단어로 끝나는 조건 
LIKE '%단어%' -> 단어가 포함되는 조건

_ -> 하나의 문자의 자리
LIKE '_구%' -> 왼쪽에서 2번째가 구나오는 조건
[^
[0-9]%

집합함수 - GROUP BY 
SUM() 합계 
AVG() 평균
MIN() 최소값
MAX() 최대값

COUNT() - 투플의 갯수

별칭 -> 공백이 있는 경우 반드시 따옴표

SELECT custid, COUNT(*) "주문 수량" FROM Orders WHERE saleprice >= 8000 GROUP BY custid HAVING COUNT(*) >= 2;


SELECT c.custid, c.name, SUM(o.saleprice) "총 판매액"  FROM Customer c, Orders o WHERE c.custid = o.custid GROUP BY c.name ORDER BY c.name

SELECT c.custid, c.name, SUM(o.saleprice) "총 판매액" FROM Customer c INNER JOIN Orders o ON c.custid = o.custid GROUP BY c.custid ORDER BY c.name

SELECT c.name, b.bookname FROM Customer c, Orders o, Book b 
WHERE c.custid = o.custid AND o.bookid = b.bookid AND b.price = 20000;

SELECT c.name, b.bookname FROM Customer c 
		INNER JOIN Orders o ON c.custid = o.custid 
        INNER JOIN Book b ON o.bookid = b.bookid 
	WHERE b.price = 20000;
	
외부조인 
	- 조인에 실패한 투플도 포함하여 반환하는 조인 
	  ( NULL 채워서 반환)
	  왼쪽 외부조인 (LEFT [OUTER] JOIN)
	  오른쪽 외부조인 (RIGHT [OUTER] JOIN)
	  FULL 외부 조인
	  
	  SELECT c.name, o.saleprice FROM Customer c LEFT JOIN Orders o ON c.custid = o.custid;
	  

SELECT bookname FROM Book WHERE price = (SELECT MAX(price) FROM Book);

SELECT bookname FROM Book ORDER BY price DESC LIMIT 1;




SELECT b1.bookname FROM book b1 WHERE b1.price > (SELECT avg(b2.price) FROM Book b2 WHERE b2.publisher = b1.publisher);


SELECT name FROM Customer WHERE address LIKE '대한민국%'
UNION ALL 
SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders);

UNION - 합집합 - 중복 값 X
UNION ALL - 합집합(중복값을 포한한)


SELECT name FROM Customer WHERE address LIKE '대한민국%'
UNION ALL 
SELECT DISTINCT c.name FROM Customer c INNER JOIN Orders o ON c.custid = o.custid;


CREATE TABLE NewBook (
    bookid INTEGER, 
    bookname VARCHAR(20) NOT NULL,
    publisher VARCHAR(20) UNIQUE, 
    price INTEGER DEFAULT 10000 CHECK(price >= 1000),
    PRIMARY KEY(bookid)
);


ALTER TABLE NewBook ADD isbn VARCHAR(13) AFTER bookid;

FIRST  - 속성의 가장 앞에 
AFTER  - 속성 바로 뒤에

INSERT INTO Book VALUES (11, '스포츠 의학', '한솔의학서적', 90000);

INSERT INTO Book (bookid, bookname, publisher, price) VALUES (11, '스포츠 의학', '한솔의학서적', 90000);

DELETE FROM Book WHERE bookid='9';

DELETE FROM Book  - 테이블 데이터 삭제 
						- 자동 증감번호 - 유지 
						- 데이터 복수 가능 
							
TRUNCATE Book - 테이블 데이터 비우고, 초기화
					   - 자동 증감번호 초기화
					   - 복구 불가능 