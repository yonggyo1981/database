1. 데이터 조작어 - 검색(관계대수)
	SELECT 
		[ALL | DISTINCT] 속성이름(들 - 콤마(,)) 
		[AS 속성이름 별칭]
	FROM 
		테이블이름(들) [AS 테이블이름 별칭]
		[ INNER JOIN | LEFT [OUTER] JOIN | RIGHT [OUTER] JOIN]
		테이블명 ON 검색조건(JOIN을 할 공통 속성)
	WHERE <검색조건>
	| GROUP BY 속성이름 
	| HAVING <검색조건>
	| UNION - 합집합(중복 X) | UNION ALL - 합집합(중복 O)
	| ORDER BY 속성이름 [ASC | DESC]
	
	DISTINCT - 유일한 속성 값 -> 중복 없는 속성 값
	GROUP BY - 속성의 공통 값으로 묶어 주는 기능  -> 통계 + 집계함수(AVG(), SUM(), MIN(), MAX(), COUNT())
	HAVING -> 집계 함수의 검색조건
	ORDER BY - 속성 값 정렬 (오름차순(기본값) - ASC, 내림차순 - DESC)
	
2. 데이터 정의어 
3. 데이터 조작어 - 삽입, 수정, 삭제

데이터 조작어 -> 데이터를 다루는 언어(CRUD)
C - CREATE - 데이터 추가(INSERT)
R - READ - 데이터 조회(SELECT)
U - UPDATE - 데이터 수정(UPDATE)
D - DELETE - 데이터 삭제(DELETE)

데이터 정의어 -> 데이터를 저장할 할 수 있는 공간을 생성, 변경, 삭제
                        Database, Table  -> 제약조건

orderid  - Orders 기본키 
custid - Customer 테이블의 기본키 - Orders의 외래키
bookid - Book 테이블의 기본키 - Orders의 외래키\

3-1. 모든 도서의 이름과 가격을 검색하시오
3-2. 모든 도서의 도서번호, 도서이름, 출판사, 가격
* -> 모든 속성 
3-3. 출판사

WHERE <조건>
		 - 비교 (><, >=, <=, =, (<> !=))
		 - 범위 속성 BETWEEN 시작범위 AND 종료 범위 
						-> 속성 >= 시작범위 AND 속성 <= 종료범위
		 - 집합 -> (교집합)속성 IN (값1, 값2, ...), (차집합)속성 NOT IN (값1, 값2, ....)
		 - 패턴 -> LIKE 
						- LIKE '키워드' -> 키워드에 정확하게 매칭되는 패턴
						- LIKE '키워드%' -> 키워드로 시작하는 패턴 
						- LIKE '%키워드' -> 키워드로 끝나는 패턴
						- LIKE '%키워드%' -> 키워드가 포함되는 패턴
		 - NULL     - 값이 지정되 않은 상태
					   - NULL 과 빈값('')은 같지 않다
					   빈값도 값 -> 비어 있는 값을 저장 
					   - 비교 X (속성 = NULL X)
					   - IS NULL  / IS NOT NULL 
					   (속성 IS NULL OR 속성 = '')
					   
		 - 복합조건  - AND,  OR, NOT - 논리 연산자
					- 연산자의 우선순의 
					관계(비교) 연산자   >  논리 연산자
					
					price > 1000 AND price < 2000

3-4 가격이 20,000원 미만

3-5 가격 10,000원 이상 20,000 이하 
범위 - BETWEEN 

3-6 출판사 - 굿스포츠, 대한미디어
	
3-7 축구의역사

P156
3-8. 도서이름 <- 축구 포함된 출판사를 검색
속성 LIKE '키워드' -> 키워드와 일치
속성 LIKE '키워드%' -> 키워드로 시작하는 패턴
속성 LIKE '%키워드' -> 키워드로 끝나는 패턴
속성 LIKE '%키워드%' -> 키워드가 포함되는 패턴

3-9. 왼쪽에서 두 번째 위치에 '구'로 시작하는 패턴 
+ 
%
[]   [0-5]%
[^문자]

[^0-9]%


_ -> 1개 문자열 자리수

3-10. 축구와 관련된 도서 + 20,000이상 

3-11. 출판사가 - 굿스포츠,대한미디어

3-12 
ORDER BY 속성 [ASC - 오름차순(기본) | DESC - 내림차순 ] -  속성정렬 

ORDER BY 속성1 DESC, 속성2 ASC .... 
					
3-13 - 가격 순(price 오름차순), 가격 동일 -> 이름순으로(bookname 오름차순)

3-14. 가격(price 내림차순), 가격 동일 -> 출판사의 오름차순(publisher 오름차순)

GROUP BY -> 같은 속성 값으로 묶어주는 절
GROUP BY 속성

3-15 
SUM()

3-16 2번 고객 총 판매액
3-17. 총 판매액, 평균값, 최저가, 최고가 
        (SUM())     (AVG())  (MIN())  (MAX());

3-18. 도서 판매 건수 -> Orders 테이블의 총 투플 갯수
	COUNT(속성) -> 투플의 갯수
						-> 속성값이 NULL인 것은 제외 하고 갯수를 카운팅 
						

3-19. 고객별 주문한 도서의 총수량, 총 판매액 

HAVING <조건> <-- 집계함수를 사용한 조건

3-20. 8,000원이상 도서를 구매한 고객 중에서 (WHERE)
		+ 고객별 주문 도서 총 수량 (GROUP BY custid - SUM(saleprice))
		+ 단 두건이상 구매한 고객 -> HAVING COUNT(*) >= 2)



165 - 두개 이상 테이블에서 SQL 질의 -> JOIN 
카티전 프로덕트 -> 집합의 순서쌍  + 셀렉션 연산 

3-22. 고객, 고객의 주문 + 고객별로 정렬

3-24. 고객별 주문(Customer, Orders), - 고객별 총 판매액, 고객별로 정렬(이름 - 오름차순)

3-25 고객 + 주문 + 도서 (고객이름, 도서 이름)

3-26 Customer(고객 이름), Orders, Book(도서 이름)
  + 가격이 20,000
  
외부 조인
3-27. 도서를 구매하지 않은 고객을 포함하여
		고객의 이름과 고객이 주문 도서의 판매가격
		Customer 
		Orders
		
		LEFT [OUTER] JOIN
 
P172 - 부속질의
- 중첩 부속질의
	부속질의 결과가 1개 인경우 -> 비교 연산자 
	3-28
	
	부속질의 결과가 여러개인 경우  -> 집합 연산자(IN - 교집합)
												참고) NOT IN (차집합)
	3-29 
	JOIN -> 테이블 순서쌍을 전체 -> 조건에 맞지 않는 투플을 제거
	부속질의 -> Orders 테이블의 custid를 가져온 후 -> 투플을 조회
	
	P175 - 3-30
	대한미디어에서 출판한 도서를 구매한 고객 
	Customer -> custid 
		Order   -> custid, bookid
			Book -> bookid
	
	
- 상관 부속질의
	주질의의 결과와 부속질의 속성의 조건과 상관
	P177 - 3-31
	출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 구하시오
	
	
	1) 평균 도서 가격보다 비싼 도서를 구하시오
	2) 출판사별로
	
합집합
UNION 
	- 중복 없는 투플
	- 동일한 도메인
	- 동일한 순서

3-32. 대한민국에서 거주하는 고객의 이름과 도서를 주문한 고객의 이름을 보이시오
1) 대한민국에서 거주하는 고객의 이름
2) 도서를 주문한 고객의 이름

UNION ALL 
	- 중복을 허용하는 합집합 

EXISTS
	-> 투플의 존재 여부로 
	P181 - 3-33 주문이 있는 고객의 이름과 주소